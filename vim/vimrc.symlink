" -----------------------------------------------------------------------------
"  Init stuff
" -----------------------------------------------------------------------------

" Init Vundle.
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Bundles!
Bundle 'gmarik/vundle'

" Use the Base16 color scheme.
Bundle 'chriskempson/base16-vim'

" Superb comments functionality.
Bundle 'tomtom/tcomment_vim'

" Git wrapper.
Bundle 'tpope/vim-fugitive'

" Rails features for vim.
Bundle 'tpope/vim-rails'

" Mappings to manipulate surroundings: parentheses, brackets, and more.
Bundle 'tpope/vim-surround'

" Syntax plugins
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'jdaihl/vim-less'
Bundle 'JulesWang/css.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'othree/html5.vim'

" Highlight colors in CSS files.
Bundle 'ap/vim-css-color'

" Check syntax for errors.
Bundle 'scrooloose/syntastic'

" Add browser prefixes to CSS3 properties.
Bundle 'vim-scripts/prefixer.vim'

" Looking up documentation.
Bundle 'Keithbsmiley/investigate.vim'

" Text filtering and alignment.
Bundle 'godlygeek/tabular'

" Enhance netwr (directory explorer).
Bundle 'tpope/vim-vinegar'

" Set color scheme.
set background=dark
colorscheme base16-eighties

" -----------------------------------------------------------------------------
"  1 Important
" -----------------------------------------------------------------------------

" Don't behave like Vi.
set nocompatible

" Key sequence to toggle paste mode.
set pastetoggle=<F2>

" -----------------------------------------------------------------------------
"  2 Moving around, searching and patterns
" -----------------------------------------------------------------------------

" Which commands wrap to another line? Backspace and cursors.
set whichwrap+=<,>,h,l,[,]

" Don't jump to the start of line when scrolling.
set nostartofline

" Set path to the folder from which we opened Vim.
set path=$PWD/**

" Do incremental searching.
set incsearch

" Ignore case when searching.
set ignorecase

" -----------------------------------------------------------------------------
"  3 Tags
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  4 Displaying text
" -----------------------------------------------------------------------------

" Show some lines around the cursor.
set scrolloff=5

" Wrap lines.
set wrap

" Soft break lines at end of window.
set linebreak

" Preserve indentation.
set breakindent

" Meh.
set fillchars=fold:\
set fillchars+=vert:\|

" Command line height.
set cmdheight=2

" List of strings used for list mode.
set listchars=tab:▸\ ,trail:~

" Display unprintable characters.
" set list

" Turn off lazy redraw.
set nolazyredraw

" Show line numbers.
set number

" Show relative line numbers.
set relativenumber

" -----------------------------------------------------------------------------
"  5 Syntax, highlighting and spelling
" -----------------------------------------------------------------------------

filetype off
filetype indent on
filetype plugin indent on

" Enable syntax themes.
syntax enable

" Don't highlight searches.
set nohlsearch

" Highlight extra, unwanted whitespace.
highlight ExtraWhitespace ctermbg=red ctermfg=white
autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/ containedin=ALL

" -----------------------------------------------------------------------------
"  6 Multiple windows
" -----------------------------------------------------------------------------

" Always show the statusline.
set laststatus=2

" Change color of statusline according to current mode.
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi StatusLine ctermfg=4
  elseif a:mode == 'r'
    hi StatusLine ctermfg=1
  else
    hi StatusLine ctermbg=18 ctermfg=blue
  endif
endfunction

" Change statusline colors when entering or changing insert mode.
au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertChange * call InsertStatuslineColor(v:insertmode)

" Change back to default when exiting insert mode.
au InsertLeave * hi StatusLine ctermbg=10 ctermfg=7

" Default the statusline when entering Vim.
hi StatusLine ctermbg=10 ctermfg=7
hi StatusLineNC ctermbg=10 ctermfg=11

" Set the content of the statusline.
set statusline=
set statusline+=%<%f
set statusline+=%(\ %M%)
set statusline+=%(\ %Y%)
set statusline+=%(\ %R%)
set statusline+=%= 
set statusline+=\ %1*%{SyntasticStatuslineFlag()}%*\ 
set statusline+=\ %{fugitive#statusline()}\ 
set statusline+=\ LINE(%l\/%L)

" Change the color of the vertical splitter.
hi VertSplit ctermbg=black ctermfg=darkgrey

" Define custom user highlight groups.
hi User1 ctermbg=10 ctermfg=1

" -----------------------------------------------------------------------------
"  7 Mulitple tab pages
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  8 Terminal
" -----------------------------------------------------------------------------

" Terminal connection is fast, baby!
set ttyfast

" -----------------------------------------------------------------------------
"  9 Using the mouse
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  10 Printing
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  11 Messages and info
" -----------------------------------------------------------------------------

" Shorten messages.
set shortmess=filtIoOA

" Don't display incomplete commands.
set noshowcmd

" Show the cursor position all the time.
set ruler

" Tell us about changes.
set report=0

" Shut the fuck up!
set visualbell

" -----------------------------------------------------------------------------
"  12 Selecting text
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  13 Editing text
" -----------------------------------------------------------------------------

" Wrap at 80 chars by default.
" set tw=80

" Allow backspacing over everything in insert mode.
set backspace=2

" Support for numbered/bullet lists.
set formatoptions+=n

" Brackets/braces that is.
set showmatch

" Duration to show matching brace (1/10 sec).
set matchtime=5

" -----------------------------------------------------------------------------
"  14 Tabs and indenting
" -----------------------------------------------------------------------------

" Number of spaces a <Tab> in the text stands for.
set tabstop=2

" Number of spaces used for each step of (auto)indent.
set shiftwidth=2

" Fuck tabs.
set nosmarttab

" If non-zero, number of spaces to insert for a <Tab>.
set softtabstop=2

" Expand tabs to spaces.
set expandtab

" Automatic indent new lines.
set autoindent

" Be smart about it.
set smartindent

" Set color of indent lines.
let g:indentLine_color_term = 0

" -----------------------------------------------------------------------------
"  15 Folding
" -----------------------------------------------------------------------------

" Display all folds open.
set nofoldenable

" Close folds higher than 2.
set foldlevel=2

" Change what's printed on the folded line.
set foldtext=NeatFoldText()

" Fold by syntax.
set foldmethod=syntax

" Disable Ruby comment folds.
let ruby_no_comment_fold=1

" Custom fold function.
function! NeatFoldText() "{{{2
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = '·'
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

" Color setup for folds.
highlight Folded term=bold ctermbg=0 ctermfg=7
highlight FoldColumn term=bold ctermbg=10 ctermfg=7

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.
autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
autocmd InsertLeave * let &l:foldmethod=w:last_fdm

" -----------------------------------------------------------------------------
"  16 Diff mode
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  17 Mapping
" -----------------------------------------------------------------------------

" Allow timing out halfway into a mapping.
set ttimeoutlen=50

" -----------------------------------------------------------------------------
"  18 Reading and writing files
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  19 The swap file
" -----------------------------------------------------------------------------

" Don't use a swap file.
set noswapfile

" -----------------------------------------------------------------------------
"  20 Command line editing
" -----------------------------------------------------------------------------

" How does command line completion work?
set wildmode=list:full

" Ignore these file patterns.
set wildignore+=*.exe,*.swp,.DS_Store

" Turn on wild menu.
set wildmenu

" Enable persistent undo, and set location of undo files directory.
set undofile
set undodir=$HOME/.vimundo

" -----------------------------------------------------------------------------
"  21 Executing external commands
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  22 Running make and jumping to errors
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  23 Language specific
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  24 Multi-byte characters
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  25 Various
" -----------------------------------------------------------------------------

" Same background for line numbers as main window.
hi LineNr ctermbg=0

" Different color for current line number.
hi CursorLineNr ctermbg=0 ctermfg=9

" Alow virtual edit in visual block.
set virtualedit=block

" Open investigate in Dash
let g:investigate_use_dash=1

" Strip all trailing whitespace in file.
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

" Clear SignColumn column.
highlight clear SignColumn

" Toggle linenumber mode.
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

" Rename tabs to show tab number.
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
  function! MyTabLine()
    let s = ''
    let wn = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let s .= ' '
      let wn = tabpagewinnr(i,'$')

      let s .= '%#TabNum#'
      let s .= i . ')'
      let s .= ' '
      " let s .= '%*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = '[No Name]'
      endif
      let s .= file . ' '
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction
  set stal=2
  set tabline=%!MyTabLine()
  set showtabline=1
  highlight link TabNum Special
endif

let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_ruby_rubocop_args = '-R'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_enable_signs = 1
let g:syntastic_stl_format = 'SYNTAX(%E{err: %e}%B{ }%W{warn: %w})'

" -----------------------------------------------------------------------------
"  26 Remapping
" ----------------------------------------------------------------------------

" Set leader to <space>
let mapleader = "\<Space>"

" Allow indented comments. See https://news.ycombinator.com/item?id=3124188
" for more info.
inoremap # X<BS>#

" Compile LESS files.
nnoremap <leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>

" Increase and decerase numbers under the cursor.
nnoremap <leader>a <C-a>
nnoremap <leader>x <C-x>

" Exit to normal mode with 'jj'
inoremap jj <ESC>

" Remap tagging because Norwegian keyboards <3.
nnoremap <C-y> <C-]>

" Toggle comments with leader + c.
map <leader>c <c-_><c-_>

" Change linenumber mode with leader + l.
nnoremap <leader>l :call NumberToggle()<CR>

" Reflow paragraph with Q in normal and visual mode.
nnoremap Q gqap
vnoremap Q gq

" Sane movement with wrap turned on.
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Quickly edit/reload the vimrc file.
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Use Q for formatting the current paragraph (or selection).
vmap Q gq
nmap Q gqap

" Disable arrow keys in both normal and insert mode.
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" Easy window navigation.
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Quickly change buffers by pressing leader + b and a number.
nnoremap <leader>b :buffer <C-z><S-Tab>
nnoremap <leader>B :vert sbuffer <C-z><S-Tab>

" Copy and paste to system clipboard.
vmap <leader>y "+y
vmap <leader>d "+d
nmap <leader>p "+p
nmap <leader>P "+P
vmap <leader>p "+p
vmap <leader>P "+P

" Save a file with leader + w.
nnoremap <leader>w :w<CR>

" Save a file as root (sudo).
cmap w!! w !sudo tee % >/dev/null

noremap <leader>i :set ts=4 sw=4 noet <BAR> retab! <BAR> set ts=2 sw=2 et <BAR> retab<CR>
noremap <leader>o :set ts=2 sw=2 noet <BAR> retab! <BAR> set ts=4 sw=4 et <BAR> retab<CR>

" Better tab navigation.
nnoremap th :tabfirst<CR>
nnoremap tj :tabprev<CR>
nnoremap tk :tabnext<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>
nnoremap tq :tabclose<CR>

if exists(':Tabularize')
  nmap <leader>a= :Tabularize /=<CR>
  vmap <leader>a= :Tabularize /=<CR>
  nmap <leader>a: :Tabularize /:\zs<CR>
  vmap <leader>a: :Tabularize /:\zs<CR>
endif

" Look up documentation with leader + K.
nnoremap <leader>K :call investigate#Investigate()<CR>

