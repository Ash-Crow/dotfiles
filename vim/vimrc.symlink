" -----------------------------------------------------------------------------
"  Init stuff
" -----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')       " initialize vim-plug

Plug 'chriskempson/base16-vim'          " base16 color scheme
Plug 'tomtom/tcomment_vim'              " comments
Plug 'tpope/vim-fugitive'               " git wrapper
Plug 'tpope/vim-rails'                  " rails features
Plug 'tpope/vim-surround'               " manipualte surroundings
Plug 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plug 'jdaihl/vim-less'                  " LESS syntax
Plug 'JulesWang/css.vim'                " CSS syntax
Plug 'kchmck/vim-coffee-script'         " coffee script syntax
Plug 'mustache/vim-mustache-handlebars' " mustache syntax
Plug 'othree/html5.vim'                 " HTML5 syntax
Plug 'ap/vim-css-color'                 " highlight css colors
Plug 'scrooloose/syntastic'             " check for syntax errors
Plug 'vim-scripts/prefixer.vim'         " add CSS3 browser prefixes
Plug 'Keithbsmiley/investigate.vim'     " look up documentation
Plug 'godlygeek/tabular'                " text filtering and alignment
Plug 'tpope/vim-vinegar'                " enhance netwr

call plug#end()

" Set color scheme.
set background=dark
colorscheme base16-eighties

" -----------------------------------------------------------------------------
"  1 Important
" -----------------------------------------------------------------------------

set pastetoggle=<F2>                    " toggle paste mode with F2

" -----------------------------------------------------------------------------
"  2 Moving around, searching and patterns
" -----------------------------------------------------------------------------

set whichwrap+=<,>,h,l,[,]              " which commands wrap to another line?
set nostartofline                       " don't jump to start of line when scrolling
set path=$PWD/**                        " use current folder for file searching
set incsearch                           " use incremental searching
set ignorecase                          " ignore case when searching

" -----------------------------------------------------------------------------
"  3 Tags
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  4 Displaying text
" -----------------------------------------------------------------------------

set scrolloff=5                         " show five lines around the cursor
set wrap                                " wrap lines
set linebreak                           " soft break lines at end of window
set breakindent                         " preserve indentation in wrapped text
set fillchars=fold:\\,vert:\|           " used by statusline, folds and filler lines
set cmdheight=2                         " height of command line
set nolazyredraw                        " turn off lazy redraw
set listchars=tab:â–¸\ ,trail:~           " strings used for list mode
set number                              " show line numbers
set relativenumber                      " show relative line numbers

" -----------------------------------------------------------------------------
"  5 Syntax, highlighting and spelling
" -----------------------------------------------------------------------------

filetype off
filetype indent on
filetype plugin indent on

syntax enable                           " enable syntax themes
set nohlsearch                          " don't highlight search matches

" -----------------------------------------------------------------------------
"  6 Multiple windows
" -----------------------------------------------------------------------------

set laststatus=2                        " always show the statusline

set statusline=                         " set the content of the statusline
set statusline+=%<%f
set statusline+=%(\ %M%)
set statusline+=%(\ %Y%)
set statusline+=%(\ %R%)
set statusline+=%= 
set statusline+=\ %1*%{SyntasticStatuslineFlag()}%*\ 
set statusline+=\ %{fugitive#statusline()}\ 
set statusline+=\ LINE(%l\/%L)

" -----------------------------------------------------------------------------
"  7 Mulitple tab pages
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  8 Terminal
" -----------------------------------------------------------------------------

set ttyfast                             " terminal connection is fast

" -----------------------------------------------------------------------------
"  9 Using the mouse
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  10 Printing
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  11 Messages and info
" -----------------------------------------------------------------------------

set shortmess=filtIoOA                  " shorten messages
set noshowcmd                           " don't display incomplete commands
set ruler                               " show cursor position
set report=0                            " repot changes
set visualbell                          " use visual bell instead of beeping

" -----------------------------------------------------------------------------
"  12 Selecting text
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  13 Editing text
" -----------------------------------------------------------------------------

set backspace=2                         " backspace over everything in insert mode
set formatoptions+=n                    " support for numbered lists
set showmatch                           " show matching brackets
set matchtime=5                         " duration to show matching brackets

" -----------------------------------------------------------------------------
"  14 Tabs and indenting
" -----------------------------------------------------------------------------

set tabstop=2                           " number of spaces <Tab> stands for
set shiftwidth=2                        " number of spaces used for each indent step
set nosmarttab
set softtabstop=2                       " <Tab> equals two spaces
set expandtab                           " expand <Tab> to spaces in insert mode
set autoindent                          " automatically indent new lines
set smartindent                         " do clever autoindenting

" Set color of indent lines.
let g:indentLine_color_term = 0

" -----------------------------------------------------------------------------
"  15 Folding
" -----------------------------------------------------------------------------

set nofoldenable                        " display all folds as open
set foldlevel=2                         " close folds higher than 2
set foldtext=NeatFoldText()             " change what's printed on the folded line
set foldmethod=syntax                   " fold by syntax
let ruby_no_comment_fold=1              " disable folding ruby syntax

" -----------------------------------------------------------------------------
"  16 Diff mode
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  17 Mapping
" -----------------------------------------------------------------------------

set ttimeoutlen=50                      " allow timing out halfway into mapping

" -----------------------------------------------------------------------------
"  18 Reading and writing files
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  19 The swap file
" -----------------------------------------------------------------------------

set noswapfile                          " don't use swap file

" -----------------------------------------------------------------------------
"  20 Command line editing
" -----------------------------------------------------------------------------

set wildcharm=<C-z>
set wildmode=list:full                  " how does command line completion work?
set wildignore+=*.exe,*.swp,.DS_Store   " ignored file patterns
set wildmenu                            " turn on wild menu
set undofile                            " enable persistent undo
set undodir=$HOME/.vimundo              " set location of undo files

" -----------------------------------------------------------------------------
"  21 Executing external commands
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  22 Running make and jumping to errors
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  23 Language specific
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  24 Multi-byte characters
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  25 Various
" -----------------------------------------------------------------------------

set virtualedit=block                       " allow virtual edit in virtual block

let g:investigate_use_dash=1                " use dash for investigate

let g:syntastic_ruby_checkers = ['rubocop'] " use rubycop for ruby syntax
let g:syntastic_ruby_rubocop_args = '-R'    " use rails cops for ruby files
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_enable_signs = 1
let g:syntastic_stl_format = 'SYNTAX(%E{err: %e}%B{ }%W{warn: %w})'

" -----------------------------------------------------------------------------
"  26 Remapping
" ----------------------------------------------------------------------------

" YOPO mappings.
nnoremap <silent> <Plug>unimpairedPaste :call <SID>setup_paste()<CR>
nnoremap <silent> yo :call <SID>setup_paste()<CR>o
nnoremap <silent> yO :call <SID>setup_paste()<CR>O

" Set leader to <space>
let mapleader = "\<Space>"

" Allow indented comments. See https://news.ycombinator.com/item?id=3124188
" for more info.
inoremap # X<BS>#

" Compile LESS files.
nnoremap <leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>

" Increase and decerase numbers under the cursor.
nnoremap <leader>a <C-a>
nnoremap <leader>x <C-x>

" Exit to normal mode with 'jj'
inoremap jj <ESC>

" Remap tagging because Norwegian keyboards <3.
nnoremap <C-y> <C-]>

" Toggle comments with leader + c.
nmap <leader>c <c-_><c-_>

" Change linenumber mode with leader + l.
nnoremap <leader>l :call NumberToggle()<CR>

" Reflow paragraph with Q in normal and visual mode.
nnoremap Q gqap
xnoremap Q gq

" Sane movement with wrap turned on.
nnoremap j gj
nnoremap k gk
xnoremap j gj
xnoremap k gk

" Quickly edit/reload the vimrc file.
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" Use Q for formatting the current paragraph (or selection).
xnoremap Q gq
nnoremap Q gqap

" Disable arrow keys in both normal and insert mode.
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Easy window navigation.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Quickly change buffers by pressing leader + b and a number.
nnoremap <leader>b :buffer <C-z><S-Tab>
nnoremap <leader>B :vert sbuffer <C-z><S-Tab>

" Copy and paste to system clipboard.
xnoremap <leader>y "+y
xnoremap <leader>d "+d
nnoremap <leader>p "+p
nnoremap <leader>P "+P
xnoremap <leader>p "+p
xnoremap <leader>P "+P

" Save a file with leader + w.
nnoremap <leader>w :w<CR>

" Save a file as root (sudo).
cmap w!! w !sudo tee % >/dev/null

noremap <leader>i :set ts=4 sw=4 noet <BAR> retab! <BAR> set ts=2 sw=2 et <BAR> retab<CR>
noremap <leader>o :set ts=2 sw=2 noet <BAR> retab! <BAR> set ts=4 sw=4 et <BAR> retab<CR>

" Better tab navigation.
nnoremap th :tabfirst<CR>
nnoremap tj :tabprev<CR>
nnoremap tk :tabnext<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>
nnoremap tq :tabclose<CR>

" Map keys to find files.
nnoremap <leader>f :find *
nnoremap <leader>s :sfind *
nnoremap <leader>v :vert sfind *

" Open the local-directory browser of current file.
nnoremap <leader>k :Explore<CR>

if exists(':Tabularize')
  nnoremap <leader>a= :Tabularize /=<CR>
  xnoremap <leader>a= :Tabularize /=<CR>
  nnoremap <leader>a: :Tabularize /:\zs<CR>
  xnoremap <leader>a: :Tabularize /:\zs<CR>
endif

" Look up documentation with leader + K.
nnoremap <leader>K :call investigate#Investigate()<CR>

" Display highlight group of word below cursor.
nnoremap <F9> :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<CR>

" -----------------------------------------------------------------------------
"  27 Color highlighting
" -----------------------------------------------------------------------------

highlight CursorLineNr ctermbg=0 ctermfg=9
highlight ExtraWhitespace ctermbg=red ctermfg=white
highlight FoldColumn term=bold ctermbg=10 ctermfg=7
highlight Folded term=bold ctermbg=0 ctermfg=7
highlight LineNr ctermbg=0
highlight StatusLine ctermbg=10 ctermfg=7
highlight StatusLineNC ctermbg=10 ctermfg=11
highlight User1 ctermbg=10 ctermfg=1
highlight VertSplit ctermbg=black ctermfg=darkgrey
highlight clear SignColumn

" -----------------------------------------------------------------------------
"  28 Custom functions
" -----------------------------------------------------------------------------

" Change color of statusline according to current mode.
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    highlight StatusLine ctermfg=4
  elseif a:mode == 'r'
    highlight StatusLine ctermfg=1
  else
    highlight StatusLine ctermbg=18 ctermfg=blue
  endif
endfunction

" Custom fold function.
function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = 'Â·'
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

" Strip all trailing whitespace in file.
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

" Toggle linenumber mode.
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

" YOPO (You Only Paste Once) functions. See commit message for more info.
function! s:setup_paste() abort
  let s:paste = &paste
  let s:mouse = &mouse
  set paste
  set mouse=
endfunction

" -----------------------------------------------------------------------------
"  29 Autocommand groups
" -----------------------------------------------------------------------------

" Change statusline colors when entering and changing insert mode, and change
" back to default colors when exiting insert mode.
augroup ChangeStatuslineColor
  autocmd!
  autocmd InsertEnter,InsertChange * call InsertStatuslineColor(v:insertmode)
  autocmd InsertLeave * highlight StatusLine ctermbg=10 ctermfg=7
augroup END

augroup unimpaired_paste
  autocmd!
  autocmd InsertLeave *
        \ if exists('s:paste') |
        \   let &paste = s:paste |
        \   let &mouse = s:mouse |
        \   unlet s:paste |
        \   unlet s:mouse |
        \ endif
augroup END

" Highlight extra, unwanted whitespace.
augroup HighlightExtraWhitespace
  autocmd!
  autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/ containedin=ALL
augroup END

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.
augroup FixFoldWhenInserting
  autocmd!
  autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
  autocmd InsertLeave * let &l:foldmethod=w:last_fdm
augroup END
